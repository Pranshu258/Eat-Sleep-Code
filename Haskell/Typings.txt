#####################################################################
ASSIGNMENT 2: Q1 - README 
#####################################################################
HOW TO TEST:
Please add the following line to the file "q1.hs" at the top. The 
file "q1.hs" was submitted in the main submission of assign 2. Also, 
please rename that file as "Typings.hs" so that "test.hs" can import it 
as a module and use the type definitions in it. The line to be added is:

module Typings where

Otherwise, you can use the file "Typings.hs" from this submission itself.
No other changes have been made in the file. Just that line was added.
Please read the file test.txt for test cases.
The test case terms have been defined in the "test.hs" file. To test 
load "test.hs" in the console.
#####################################################################


The lambda types are defined by the data type named "Type"

The lambda terms are defined by the data type named "Term"
    These are the possible ways to define a new term
    Var String, Abs String Type Term, App Term Term
    
addContext:
    This is a function that takes a variable typing (String, Type) 
    and a context and adds this typing to the context. 
    The typing context has been implemented as a list of (String, Type) 
    tuples. The first member is the variable name and the second member 
    is its type.

    Example usage: ctx = addContext ("x", Bool) []
    Context "ctx" will now have variable named "x" typed as Bool. 
    Further usage: ctx_new = addContext ("y", Bool) ctx

vars:
    A function that takes a typing context and returns a list of the 
    variable names that are typed in that context.
    It is a helper function that is called by getType function.

    Example usage: vars ctx_new
    Response: ["y","x"]

getType:
    A function that takes a variable name and returns its type

    Example usage: getType "x" ctx
    Response will be: Just Bool

typecheck: (Part 1B)
    A function that takes a lambda term and returns its type

    Example usage: typecheck ctx_new (Abs "x" Bool (Var "y"))
    Response: Just (Fun Bool Bool)
    This says that the given term is a function from Bool to Bool 
    as per the provided typing context.

=====================================================================
NOW COMES THE SUBTYPING PART: 1C
=====================================================================

Extended types are defined by ExtType which has constructors:
    ExtBool, ExtNat, ExtFun ExtType ExtType along with the 
    RecordType [(String, ExtType)]

Similarly we have Extended terms defined by ExtTerm:
    ExtVar String, 
    ExtAbs String ExtType ExtTerm,
    ExtApp ExtTerm ExtTerm,
    RecordTerm [(String, ExtTerm)]

labels:
    A function that takes a RecordType's listing and gives the list 
    of labels in that type.
    [(String, ExtType)] in RecordType [(String, ExtType)] is the type's 
    listing

labels2:
    A function that takes a RecordTerm's listing and gives the list of 
    labels in that term.
    [(String, ExtTerm)] in RecordTerm [(String, ExtTerm)] is the term's 
    listing

terms: 
    A function that takes a RecordTerm's listing and gives the list of 
    terms in that record.
    [(String, ExtTerm)] in RecordTerm [(String, ExtTerm)] is the term's 
    listing

extaddContext:
    Similar to addContext

extvars:
    Similar to vars

extgetType:
    Similar to getType

f: 
    Takes a RecordType's listing [(String, ExtType)] and a 
    tuple (String, ExtType) where the first member of the tuple is a 
    label and the second member is the type of term corresponding to that 
    label.
    It finds out the index of this label in the RecordType listing and then 
    checks if the type given in the tuple is an 
    acceptable type for that label of the record (subtyping considered).

checkSubtype:
    This function takes two ExtType and returns true if the first one is 
    a subtype of the second one

extTypecheck:
    Similar to typecheck but also includes records and subtyping

g: 
    Applies typecheck on each member of the record term to find out the 
    type of each member of the record term

clean: 
    Pulls out the Maybe typings from inside of the member type results of a 
    type result for record term. And renders the whole type as "Nothing" if 
    at least one of the members is found to be of type Nothing.
